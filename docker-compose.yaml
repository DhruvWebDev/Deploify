services:
  # Deploy-Code Service
  deploy-code:
    container_name: deploy-code
    build:
      context: ./deploy-code
      dockerfile: dockerfile
    ports:
      - "3000:3000" # Keep the deploy-code service on port 3000 (host and container)
    volumes:
      - ./deploy-code:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REQUEST_HANDLER_URL=http://localhost:3001
    networks:
      - app_network

  # Frontend Service
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: dockerfile
    ports:
      - "3001:5173" # Change the frontend to use port 3001 on the host
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=http://deploy-code:3000
    networks:
      - app_network

  event:
    container_name: webhook-handler-service
    build:
      context: ./webhook-event-handler
      dockerfile: dockerfile
    ports:
      - "3002:3002" # Keep the webhook-handler-service on port 3002 (host and container)
    volumes:
      - ./webhook-event-handler:/app
      - /app/node_modules
    environment:
      - NODE_EN=development
      - FRONTEND_URL=http://frontend:5173
    networks:
      - app_network
    #Redis


  redis:
    container_name: redis
    image: "redis:latest"  # Use the official Redis image
    ports:
      - "6379:6379"  # Expose port 6379 for Redis
    networks:
      - app_network
    volumes:
      - redis_data:/data  # Persistent Redis data storage


    #Request-Handler
  Request:
    container_name: request-handler
    build:
    context: ./request-handler-v2
    dockerfile: dockerfile
    volumes: -./request-handler-v2:/app -/app/node_modules
  ports:
    - "3003:3003"
  environment:
    - NODE_ENV=development
  networks:
    - app_network

# Docker Networks
networks:
  app_network:
    driver: bridge

# In your case, since both containers are connected to the same app_network, you can refer to the other container by its service name (which acts as the hostname within the network) and the port number it's exposing.
volumes:
  redis_data:
    local